###############################################
#Please use git log for copyright holder and year information
#
#This file is part of libbash.
#
#libbash is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 2 of the License, or
#(at your option) any later version.
#
#libbash is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with libbash.  If not, see <http://www.gnu.org/licenses/>.
###############################################
# Makefile.am for libbash
# Author: Nathan Eloe
###############################################
include doxygen.am

ACLOCAL_AMFLAGS = -I m4

TEST_EXTENSIONS= .gunit .ebuild
GUNIT_LOG_COMPILER = $(srcdir)/bashast/gunit/runtests.sh
AM_GUNIT_LOG_FLAGS = @antlr_cp@:.
GUNIT_TESTS = bashast/gunit/arith_main.gunit \
			  bashast/gunit/array.gunit \
			  bashast/gunit/assoc_array.gunit \
			  bashast/gunit/brace.gunit \
			  bashast/gunit/command_sub.gunit \
			  bashast/gunit/comment.gunit \
			  bashast/gunit/compound.gunit \
			  bashast/gunit/cond_main.gunit \
			  bashast/gunit/continued_lines.gunit \
			  bashast/gunit/expansions.gunit \
			  bashast/gunit/fname.gunit \
			  bashast/gunit/function.gunit \
			  bashast/gunit/list.gunit \
			  bashast/gunit/param_main.gunit \
			  bashast/gunit/pipeline.gunit \
			  bashast/gunit/process_substitution.gunit \
			  bashast/gunit/redir.gunit \
			  bashast/gunit/simp_command.gunit \
			  bashast/gunit/simp_prog.gunit

EBUILD_LOG_COMPILER = $(srcdir)/test/script_compiler.sh
EBUILD_TESTS = scripts/var_def.ebuild \
			   scripts/var_expansion.ebuild
EBUILD_RESULT = scripts/var_def.ebuild.result \
				scripts/var_expansion.ebuild.result

TESTS = $(GUNIT_TESTS) $(EBUILD_TESTS)
# these get cleaned so only add autogenerated stuff or modify CLEANFILES
check_JAVA = bashast/bashastLexer.java bashast/bashastParser.java
AM_JAVACFLAGS = -classpath @antlr_cp@

COMMON_FLAGS = -std=c++0x -I$(top_srcdir)/src/
# We use -x c++ to compile all C source files as C++ because there's C++
# code embedded in them.
# no DEVELOPER_FLAGS to as the generated files don't pass -Werror
AM_CFLAGS = -x c++ $(COMMON_FLAGS)
AM_CXXFLAGS = $(COMMON_FLAGS)
if DEVELOPER_MODE
# -Weffc++ seems to be giving false positives on protected non
# virtual destructors in base classes
AM_CXXFLAGS += -Wall \
			   -Wextra \
			   -Wold-style-cast \
			   -Woverloaded-virtual \
			   -Wsign-promo \
			   -pedantic-errors \
			   -Werror
AM_CPPFLAGS = -D_GLIBCXX_DEBUG
endif

if HAVE_GTEST
TESTS += cppunittests test/ast_printer_test.sh
check_PROGRAMS = cppunittests variable_printer ast_printer

cppunittests_SOURCES =  test/run_tests.cpp \
						src/core/tests/symbols_test.cpp \
						src/core/tests/interpreter_test.cpp \
						src/builtins/tests/echo_tests.cpp \
						src/builtins/tests/boolean_tests.cpp \
						test/post_check.cpp \
						test/api_test.cpp \
						test/walker_test.cpp
cppunittests_LDADD = libcppbash.la \
					 $(GTEST_LIBS) \
					 $(BOOST_SYSTEM_LIB) \
					 $(BOOST_FILESYSTEM_LIB)
cppunittests_LDFLAGS = -static

variable_printer_SOURCES = test/variable_printer.cpp
variable_printer_LDADD = libcppbash.la

ast_printer_SOURCES = test/ast_printer.cpp
ast_printer_LDADD = libcppbash.la $(BOOST_PROGRAM_OPTIONS_LIB)
ast_printer_LDFLAGS = -static
ast_printer_CPPFLAGS = $(BOOST_CPPFLAGS)
endif

GENERATED_PARSER_C = libbashLexer.c libbashParser.c
GENERATED_PARSER_H = libbashLexer.h libbashParser.h
GENERATED_WALKER_C = libbashWalker.c
GENERATED_WALKER_H = libbashWalker.h
BUILT_SOURCES = $(GENERATED_PARSER_C) \
				$(GENERATED_PARSER_H) \
				$(GENERATED_WALKER_C) \
				$(GENERATED_WALKER_H) \
				$(check_JAVA)
CLEANFILES = $(GENERATED_PARSER_C) \
			 $(GENERATED_PARSER_H) \
			 $(GENERATED_WALKER_C) \
			 $(GENERATED_WALKER_H) \
			 $(check_JAVA) \
			 libbash.g \
			 libbash.tokens \
			 bashast/bashast.tokens \
			 libbashWalker.tokens \
			 javagrammar.run \
			 cgrammar.run \
			 walker.run \
			 massif.out \
			 long.sh

lib_LTLIBRARIES = libcppbash.la
libcppbash_la_SOURCES = src/common.h \
						src/libbash.h \
						src/libbash.cpp \
						src/cppbash_builtin.cpp \
						src/cppbash_builtin.h \
						src/builtins/echo_builtin.cpp \
						src/builtins/echo_builtin.h \
						src/builtins/boolean_builtins.h \
						$(GENERATED_PARSER_C) \
						$(GENERATED_PARSER_H) \
						src/core/interpreter_exception.h \
						src/core/interpreter.cpp \
						src/core/interpreter.h \
						src/core/symbols.hpp \
						src/core/parser_builder.cpp \
						src/core/parser_builder.h \
						src/core/walker_builder.cpp \
						src/core/walker_builder.h \
						$(GENERATED_WALKER_C) \
						$(GENERATED_WALKER_H)

HIDDEN_FLAGS = -fvisibility=hidden \
			   -fvisibility-inlines-hidden

libcppbash_la_CXXFLAGS = $(AM_CXXFLAGS) $(HIDDEN_FLAGS)
libcppbash_la_CFLAGS = $(AM_CFLAGS) $(HIDDEN_FLAGS)

EXTRA_DIST = bashast/bashast.g \
			 bashast/libbashWalker.g \
			 bashast/features_script/features.sh \
			 bashast/features_script/features.sh.ast \
			 bashast/features_script/features.sh.tokens \
			 test/ast_printer_test.sh \
			 $(EBUILD_TESTS) \
			 $(EBUILD_RESULT) \
			 $(GUNIT_TESTS) \
			 $(GUNIT_LOG_COMPILER) \
			 $(EBUILD_LOG_COMPILER)

coding_standard.pdf: coding_standard/coding_standard.tex
	$(AM_V_GEN)@PDFLATEX@ coding_standard/coding_standard.tex 2&>1 > /dev/null

ANTLR = @JAVA@ -classpath @antlr_cp@ org.antlr.Tool

cgrammar.run: libbash.g
	$(AM_V_at)touch $@.tmp
	$(AM_V_GEN)$(ANTLR) -fo . $<
	$(AM_V_at)mv $@.tmp $@

libbash.g: bashast/bashast.g
	$(AM_V_at)sed -e 's/ASTLabelType	= CommonTree;/ASTLabelType	= pANTLR3_BASE_TREE;/g' \
				  -e 's/language	= Java;/language	= C;/g' \
				  -e 's/grammar bashast;/grammar libbash;/g' $< > $@

# Avoid initializing C++ type to NULL by sed, variables whose name
# starts with libbash_ will be stripped
walker.run: bashast/libbashWalker.g cgrammar.run
	$(AM_V_at)touch $@.tmp
	$(AM_V_GEN)$(ANTLR) -fo . $<
	$(AM_V_at)sed -i -e 's/\(libbash_.*\) = NULL/\1/' libbashWalker.c
	$(AM_V_at)mv $@.tmp $@

$(GENERATED_PARSER_C): cgrammar.run
$(GENERATED_PARSER_H): cgrammar.run

$(GENERATED_WALKER_C): walker.run
$(GENERATED_WALKER_H): walker.run

javagrammar.run: bashast/bashast.g
	$(AM_V_at)touch $@.tmp
	$(AM_V_GEN)$(ANTLR) -fo bashast $<
	$(AM_V_at)mv $@.tmp $@

$(check_JAVA): javagrammar.run

long.sh:
	rm -f $@
	for i in $$(seq 1 10000); do echo 'FOO="bar"' >> $@; done

massif.out: variable_printer long.sh
		libtool --mode=execute valgrind \
		--tool=massif --massif-out-file=massif.out \
		./variable_printer long.sh

massif: massif.out
	ms_print --threshold=10 $<
